name: Template Doctor Validate Azure Developer CLI
run-name: TDV ${{ inputs.run_id }}

on:
  workflow_dispatch:
    inputs:
      target_validate_template_url:
        description: 'Full URL of the template repository to validate'
        required: true
      callback_url:
        description: 'Callback URL to notify when validation is complete'
        required: false
      run_id:
        description: 'Unique local run ID (UUID generated by API)'
        required: true
      customValidators:
        description: 'Comma-separated list of custom validation rules'
        required: false

permissions:
  contents: read
  actions: read
  id-token: write

jobs:
  parse-repo-url:
    runs-on: ubuntu-22.04
    outputs:
      repo_urls: ${{ steps.parse_git_diff.outputs.repo_urls }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Parse input URL
        id: parse_git_diff
        run: |
          repo_urls=$(echo "${{ github.event.inputs.target_validate_template_url }}" | jq -Rsc '[split("\n") | .[]| select(.!="")]')
          echo "$repo_urls"
          echo "repo_urls=$repo_urls" >> $GITHUB_OUTPUT
        shell: bash
        continue-on-error: true

  validation:
    runs-on: ubuntu-22.04
    needs: parse-repo-url
    if: ${{ needs.parse-repo-url.outputs.repo_urls != '' }}
    strategy:
      matrix:
        repo_url: ${{ fromJson(needs.parse-repo-url.outputs.repo_urls) }}
    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Azure CLI
        run: curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      - name: Determine Azure Location
        run: |
          set -euo pipefail
          chmod +x ./scripts/list-ai-quotas.sh
          # Produce machine-readable JSON quotas
          ./scripts/list-ai-quotas.sh --json -o quotas.json || echo '[]' > quotas.json

          echo "--- Raw quotas (first 400 chars) ---"
          head -c 400 quotas.json || true
          echo -e "\n----------------------------------"

          if ! jq -e 'type=="array"' quotas.json >/dev/null 2>&1; then
            echo "Quotas file is not a JSON array; defaulting to swedencentral" >&2
            echo "AZURE_LOCATION=swedencentral" >> $GITHUB_ENV
            exit 0
          fi

          preferred_regions=("eastus2" "westus" "centralus" "swedencentral" "westeurope")
          location=""
          # Prefer regions from the preferred list that have remaining > 0
          for region in "${preferred_regions[@]}"; do
            if jq -e --arg region "$region" '.[] | select(.location==$region and .remaining > 0)' quotas.json >/dev/null; then
              location="$region"
              break
            fi
          done

          # Fallback: choose any region with the highest remaining quota if none of the preferred have capacity
          if [[ -z "$location" ]]; then
            location=$(jq -r '[.[] | select(.remaining > 0)] | sort_by(-.remaining) | .[0].location // empty' quotas.json)
          fi

          # Final default if still empty
          location=${location:-swedencentral}

          echo "AZURE_LOCATION=$location" >> $GITHUB_ENV
          echo "Chosen Azure location: $location"

      - name: Shorten Environment Name
        run: |
          short_run_id=$(echo "${{ github.run_id }}" | cut -c1-3)
          short_attempt=$(echo "${{ github.run_attempt }}" | cut -c1-3)
          env_name="tdoc-${short_run_id}-${short_attempt}"
          echo "AZURE_ENV_NAME=$env_name" >> $GITHUB_ENV
          echo "Shortened AZURE_ENV_NAME: $env_name"

      - name: Parse repo name
        id: parse_repo_name
        run: |
          repo_name=$(echo "${{ matrix.repo_url }}" | grep -oP '(?<=https:\/\/github\.com\/)[^\/]+\/[^\/]+')
          echo "repo_name=$repo_name" >> $GITHUB_OUTPUT
          echo "repo_name_short=$(echo $repo_name | cut -d'/' -f2)" >> $GITHUB_OUTPUT
        shell: bash

      - name: Log validation info
        run: |
          echo "Starting validation for template: ${{ matrix.repo_url }}"
          echo "Local Run ID (UUID): ${{ github.event.inputs.run_id }}"
          echo "GitHub Run ID: ${{ github.run_id }}"
          echo "Custom validators: ${{ github.event.inputs.customValidators }}"
          echo "Environment name: ${{ env.AZURE_ENV_NAME }}"
          echo "Location: ${{ env.AZURE_LOCATION }}"
          echo "Callback URL: ${{ github.event.inputs.callback_url || 'None provided' }}"

      - name: Clone repo
        working-directory: ${{ runner.temp }}
        run: |
          git clone "${{ matrix.repo_url }}" template
          candidate_hooks_paths=(
            "./template/hooks"
            "./template/infra/hooks"
            "./template/scripts"
            "./template/deploy/aca/scripts"
            "./template/deploy/aks/scripts"
            "./template/deploy/app-service/scripts"
          )
          for hooks_path in "${candidate_hooks_paths[@]}"; do
            if [ -d "$hooks_path" ] && [ "$(ls -A $hooks_path/*.sh 2>/dev/null)" ]; then
              chmod +x $hooks_path/*.sh
              echo "Executable permissions set for .sh files in $hooks_path"
            fi
          done

      - name: Check for Terraform
        id: check_terraform
        run: |
          if [[ -f "${{ runner.temp }}/template/infra/main.tf" ]]; then
            echo "RUN_AZD_UP=false" >> $GITHUB_OUTPUT
          else
            echo "RUN_AZD_UP=true" >> $GITHUB_OUTPUT
          fi

      - id: validation
        uses: microsoft/template-validation-action@Latest
        with:
          workingDirectory: ${{ runner.temp }}/template
        env:
          REPOSITORY_NAME: ${{ steps.parse_repo_name.outputs.repo_name }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATORS: ${{ github.event.inputs.customValidators || 'azd-provision,ps-rule' }}

      - name: Upload result
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.parse_repo_name.outputs.repo_name_short }}-validation-result
          path: ${{ steps.validation.outputs.resultFile }}

      - name: Check result
        id: check_result
        run: |
          if grep -q "NON-CONFORMING" "${{ steps.validation.outputs.resultFile }}"; then
            echo "RESULT=FAILED" >> $GITHUB_OUTPUT
          else
            echo "RESULT=PASSED" >> $GITHUB_OUTPUT
          fi
          SUMMARY=$(cat "${{ steps.validation.outputs.resultFile }}" | grep -E "## Summary|:white_check_mark:|:x:|:warning:" | head -10)
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo "$SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        shell: bash

      - name: Send callback if URL provided
        if: github.event.inputs.callback_url != ''
        run: |
          PAYLOAD=$(cat <<EOF
          {
            "localRunId": "${{ github.event.inputs.run_id }}",
            "githubRunId": "${{ github.run_id }}",
            "status": "${{ steps.check_result.outputs.RESULT }}",
            "templateUrl": "${{ matrix.repo_url }}",
            "summary": ${{ toJSON(steps.check_result.outputs.summary) }},
            "artifactUrl": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts",
            "githubRunUrl": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }
          EOF
          )
          echo "$PAYLOAD" | curl -s -X POST -H "Content-Type: application/json" -d @- "${{ github.event.inputs.callback_url }}"
        shell: bash
