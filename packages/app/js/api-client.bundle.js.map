{
  "version": 3,
  "sources": ["../src/scripts/api-client.ts"],
  "sourcesContent": ["// Unified frontend ApiClient with feature flag to route to backend functions\n// Falls back to direct GitHubClient if backend feature is disabled.\n\ninterface IssueCreateRequest {\n  owner: string; repo: string; title: string; body?: string; labels?: string[]; assignCopilot?: boolean;\n  childIssues?: { title: string; body: string; labels?: string[] }[];\n}\ninterface IssueCreateResponse {\n  issueNumber: number; htmlUrl: string; labelsEnsured: string[]; labelsCreated: string[]; copilotAssigned?: boolean;\n  childResults?: { title: string; issueNumber?: number; error?: string }[];\n}\ninterface ForkRequest { sourceOwner: string; sourceRepo: string; targetOwner?: string; waitForReady?: boolean; }\ninterface ForkResponse { forkOwner: string; repo: string; htmlUrl?: string; ready: boolean; attemptedCreate: boolean; samlRequired?: boolean; documentationUrl?: string; authorizeUrl?: string; error?: string; }\n\nconst backendEnabled = () => true; // Hard-enable backend path for deterministic test behavior & migration phase\nconst apiBase = () => (window as any).TemplateDoctorConfig?.apiBase || '/api';\n\nasync function httpJson(path: string, init: RequestInit): Promise<any> {\n  const res = await fetch(apiBase().replace(/\\/$/, '') + path, {\n    ...init,\n    headers: { 'Content-Type': 'application/json', ...(init.headers || {}) }\n  });\n  if (!res.ok) {\n    let detail: any = undefined;\n    try { detail = await res.json(); } catch {}\n    const err: any = new Error(`HTTP ${res.status} ${path} ${(detail && detail.error) || ''}`);\n    if (detail) Object.assign(err, detail);\n    err.status = res.status;\n    throw err;\n  }\n  return res.json();\n}\n\nexport const ApiClient = {\n  async createIssue(req: IssueCreateRequest): Promise<IssueCreateResponse> {\n    if (backendEnabled()) {\n      return httpJson('/v4/issue-create', { method: 'POST', body: JSON.stringify(req) });\n    }\n    // Fallback: use window.GitHubClient directly\n    const gh: any = (window as any).GitHubClient;\n    if (!gh) throw new Error('GitHubClient not ready');\n    // Ensure labels then create via existing TS client methods\n    if (req.labels?.length) {\n      await gh.ensureLabelsExist(req.owner, req.repo, req.labels);\n    }\n    const issue = await gh.createIssueGraphQL({ owner: req.owner, repo: req.repo, title: req.title, body: req.body, labels: req.labels });\n    if (req.assignCopilot) {\n      try { await gh.assignIssueToCopilotBot(issue.issueNodeId); } catch {}\n    }\n    return { issueNumber: issue.number, htmlUrl: issue.url, labelsEnsured: req.labels || [], labelsCreated: [], copilotAssigned: !!req.assignCopilot };\n  },\n  async forkRepository(req: ForkRequest): Promise<ForkResponse> {\n    if (backendEnabled()) {\n      try {\n        return await httpJson('/v4/repo-fork', { method: 'POST', body: JSON.stringify(req) });\n      } catch (e: any) {\n        // If SAML required, propagate structured object\n        if (e?.samlRequired) {\n          // Always surface a warning notification even if the notification system\n          // is not yet initialized when the 403 response is handled. We defer\n          // rendering until 'notifications-ready' if needed to avoid race flakiness\n          // observed in Playwright tests.\n          try {\n            const showSamlNotification = () => {\n              try {\n                const w:any = window as any;\n                if (!w.NotificationSystem && w.Notifications) w.NotificationSystem = w.Notifications;\n                const ns = w.NotificationSystem;\n                if (ns && typeof ns.show === 'function') {\n                  ns.show({\n                    title: 'SAML Authorization Required',\n                    message: 'This repository requires SAML SSO authorization before forking. Use the authorization link if provided.',\n                    type: 'warning',\n                    duration: 12000,\n                    actions: e.authorizeUrl ? [{ label: 'Authorize SAML', primary: true, onClick: () => window.open(e.authorizeUrl,'_blank') }] : []\n                  });\n                  try {\n                    // Post-enhance last inserted warning if attributes missing\n                    const container = document.getElementById('notification-container') || document.querySelector('.notification-container');\n                    if (container) {\n                      const last = container.querySelector('.notification.warning:last-of-type');\n                      if (last && !last.getAttribute('role')) {\n                        last.setAttribute('role', 'alert');\n                        last.setAttribute('aria-live', 'assertive');\n                      }\n                    }\n                  } catch(_) {}\n                }\n              } catch(_) {}\n            };\n            const w:any = window as any;\n            if ((w.NotificationSystem || w.Notifications) && (w.NotificationSystem?.show || w.Notifications?.show)) {\n              showSamlNotification();\n            } else {\n              document.addEventListener('notifications-ready', showSamlNotification, { once: true });\n            }\n          } catch(_) {}\n          return { forkOwner: req.targetOwner || 'unknown', repo: req.sourceRepo, htmlUrl: undefined, ready: false, attemptedCreate: false, samlRequired: true, documentationUrl: e.documentationUrl, authorizeUrl: e.authorizeUrl, error: e.error };\n        }\n        throw e;\n      }\n    }\n    const gh: any = (window as any).GitHubClient;\n    if (!gh) throw new Error('GitHubClient not ready');\n    // Defensive: ensure auth object & accessor don't throw\n    try { if (!gh.auth || (typeof gh.auth.getAccessToken !== 'function' && typeof gh.auth.getToken !== 'function')) { console.warn('[ApiClient] GitHubClient.auth incomplete; proceeding with forkRepository anyway'); } } catch {}\n    const result = await gh.forkRepository(req.sourceOwner, req.sourceRepo).catch((e:any)=>{ console.error('[ApiClient] direct forkRepository error', e?.message||e); throw e; });\n    return { forkOwner: result.forkOwner || (gh.auth?.getUsername?.() || 'unknown'), repo: req.sourceRepo, htmlUrl: result.htmlUrl || result.html_url, ready: true, attemptedCreate: true };\n  },\n  async startBatchScan(repos: string[], mode?: string): Promise<{ batchId: string; acceptedCount: number; }> {\n    if (!backendEnabled()) throw new Error('Backend feature disabled');\n    return httpJson('/v4/batch-scan-start', { method: 'POST', body: JSON.stringify({ repos, mode }) });\n  },\n  async getBatchStatus(batchId: string): Promise<any> {\n    if (!backendEnabled()) throw new Error('Backend feature disabled');\n    const res = await fetch(apiBase().replace(/\\/$/, '') + '/v4/batch-scan-status?batchId=' + encodeURIComponent(batchId));\n    if (!res.ok) throw new Error('HTTP ' + res.status + ' batch-scan-status');\n    return res.json();\n  }\n};\n\n// Expose for debugging\n(window as any).TemplateDoctorApiClient = ApiClient;\n\ndocument.dispatchEvent(new CustomEvent('api-client-ready'));\n"],
  "mappings": ";;AAcA,MAAM,iBAAiB,MAAM;AAC7B,MAAM,UAAU,MAAO,OAAe,sBAAsB,WAAW;AAEvE,iBAAe,SAAS,MAAc,MAAiC;AACrE,UAAM,MAAM,MAAM,MAAM,QAAQ,EAAE,QAAQ,OAAO,EAAE,IAAI,MAAM;AAAA,MAC3D,GAAG;AAAA,MACH,SAAS,EAAE,gBAAgB,oBAAoB,GAAI,KAAK,WAAW,CAAC,EAAG;AAAA,IACzE,CAAC;AACD,QAAI,CAAC,IAAI,IAAI;AACX,UAAI,SAAc;AAClB,UAAI;AAAE,iBAAS,MAAM,IAAI,KAAK;AAAA,MAAG,QAAQ;AAAA,MAAC;AAC1C,YAAM,MAAW,IAAI,MAAM,QAAQ,IAAI,MAAM,IAAI,IAAI,IAAK,UAAU,OAAO,SAAU,EAAE,EAAE;AACzF,UAAI,OAAQ,QAAO,OAAO,KAAK,MAAM;AACrC,UAAI,SAAS,IAAI;AACjB,YAAM;AAAA,IACR;AACA,WAAO,IAAI,KAAK;AAAA,EAClB;AAEO,MAAM,YAAY;AAAA,IACvB,MAAM,YAAY,KAAuD;AACvE,UAAI,eAAe,GAAG;AACpB,eAAO,SAAS,oBAAoB,EAAE,QAAQ,QAAQ,MAAM,KAAK,UAAU,GAAG,EAAE,CAAC;AAAA,MACnF;AAEA,YAAM,KAAW,OAAe;AAChC,UAAI,CAAC,GAAI,OAAM,IAAI,MAAM,wBAAwB;AAEjD,UAAI,IAAI,QAAQ,QAAQ;AACtB,cAAM,GAAG,kBAAkB,IAAI,OAAO,IAAI,MAAM,IAAI,MAAM;AAAA,MAC5D;AACA,YAAM,QAAQ,MAAM,GAAG,mBAAmB,EAAE,OAAO,IAAI,OAAO,MAAM,IAAI,MAAM,OAAO,IAAI,OAAO,MAAM,IAAI,MAAM,QAAQ,IAAI,OAAO,CAAC;AACpI,UAAI,IAAI,eAAe;AACrB,YAAI;AAAE,gBAAM,GAAG,wBAAwB,MAAM,WAAW;AAAA,QAAG,QAAQ;AAAA,QAAC;AAAA,MACtE;AACA,aAAO,EAAE,aAAa,MAAM,QAAQ,SAAS,MAAM,KAAK,eAAe,IAAI,UAAU,CAAC,GAAG,eAAe,CAAC,GAAG,iBAAiB,CAAC,CAAC,IAAI,cAAc;AAAA,IACnJ;AAAA,IACA,MAAM,eAAe,KAAyC;AAC5D,UAAI,eAAe,GAAG;AACpB,YAAI;AACF,iBAAO,MAAM,SAAS,iBAAiB,EAAE,QAAQ,QAAQ,MAAM,KAAK,UAAU,GAAG,EAAE,CAAC;AAAA,QACtF,SAAS,GAAQ;AAEf,cAAI,GAAG,cAAc;AAKnB,gBAAI;AACF,oBAAM,uBAAuB,MAAM;AACjC,oBAAI;AACF,wBAAMA,KAAQ;AACd,sBAAI,CAACA,GAAE,sBAAsBA,GAAE,cAAe,CAAAA,GAAE,qBAAqBA,GAAE;AACvE,wBAAM,KAAKA,GAAE;AACb,sBAAI,MAAM,OAAO,GAAG,SAAS,YAAY;AACvC,uBAAG,KAAK;AAAA,sBACN,OAAO;AAAA,sBACP,SAAS;AAAA,sBACT,MAAM;AAAA,sBACN,UAAU;AAAA,sBACV,SAAS,EAAE,eAAe,CAAC,EAAE,OAAO,kBAAkB,SAAS,MAAM,SAAS,MAAM,OAAO,KAAK,EAAE,cAAa,QAAQ,EAAE,CAAC,IAAI,CAAC;AAAA,oBACjI,CAAC;AACD,wBAAI;AAEF,4BAAM,YAAY,SAAS,eAAe,wBAAwB,KAAK,SAAS,cAAc,yBAAyB;AACvH,0BAAI,WAAW;AACb,8BAAM,OAAO,UAAU,cAAc,oCAAoC;AACzE,4BAAI,QAAQ,CAAC,KAAK,aAAa,MAAM,GAAG;AACtC,+BAAK,aAAa,QAAQ,OAAO;AACjC,+BAAK,aAAa,aAAa,WAAW;AAAA,wBAC5C;AAAA,sBACF;AAAA,oBACF,SAAQ,GAAG;AAAA,oBAAC;AAAA,kBACd;AAAA,gBACF,SAAQ,GAAG;AAAA,gBAAC;AAAA,cACd;AACA,oBAAM,IAAQ;AACd,mBAAK,EAAE,sBAAsB,EAAE,mBAAmB,EAAE,oBAAoB,QAAQ,EAAE,eAAe,OAAO;AACtG,qCAAqB;AAAA,cACvB,OAAO;AACL,yBAAS,iBAAiB,uBAAuB,sBAAsB,EAAE,MAAM,KAAK,CAAC;AAAA,cACvF;AAAA,YACF,SAAQ,GAAG;AAAA,YAAC;AACZ,mBAAO,EAAE,WAAW,IAAI,eAAe,WAAW,MAAM,IAAI,YAAY,SAAS,QAAW,OAAO,OAAO,iBAAiB,OAAO,cAAc,MAAM,kBAAkB,EAAE,kBAAkB,cAAc,EAAE,cAAc,OAAO,EAAE,MAAM;AAAA,UAC3O;AACA,gBAAM;AAAA,QACR;AAAA,MACF;AACA,YAAM,KAAW,OAAe;AAChC,UAAI,CAAC,GAAI,OAAM,IAAI,MAAM,wBAAwB;AAEjD,UAAI;AAAE,YAAI,CAAC,GAAG,QAAS,OAAO,GAAG,KAAK,mBAAmB,cAAc,OAAO,GAAG,KAAK,aAAa,YAAa;AAAE,kBAAQ,KAAK,iFAAiF;AAAA,QAAG;AAAA,MAAE,QAAQ;AAAA,MAAC;AAC9N,YAAM,SAAS,MAAM,GAAG,eAAe,IAAI,aAAa,IAAI,UAAU,EAAE,MAAM,CAAC,MAAQ;AAAE,gBAAQ,MAAM,2CAA2C,GAAG,WAAS,CAAC;AAAG,cAAM;AAAA,MAAG,CAAC;AAC5K,aAAO,EAAE,WAAW,OAAO,cAAc,GAAG,MAAM,cAAc,KAAK,YAAY,MAAM,IAAI,YAAY,SAAS,OAAO,WAAW,OAAO,UAAU,OAAO,MAAM,iBAAiB,KAAK;AAAA,IACxL;AAAA,IACA,MAAM,eAAe,OAAiB,MAAqE;AACzG,UAAI,CAAC,eAAe,EAAG,OAAM,IAAI,MAAM,0BAA0B;AACjE,aAAO,SAAS,wBAAwB,EAAE,QAAQ,QAAQ,MAAM,KAAK,UAAU,EAAE,OAAO,KAAK,CAAC,EAAE,CAAC;AAAA,IACnG;AAAA,IACA,MAAM,eAAe,SAA+B;AAClD,UAAI,CAAC,eAAe,EAAG,OAAM,IAAI,MAAM,0BAA0B;AACjE,YAAM,MAAM,MAAM,MAAM,QAAQ,EAAE,QAAQ,OAAO,EAAE,IAAI,mCAAmC,mBAAmB,OAAO,CAAC;AACrH,UAAI,CAAC,IAAI,GAAI,OAAM,IAAI,MAAM,UAAU,IAAI,SAAS,oBAAoB;AACxE,aAAO,IAAI,KAAK;AAAA,IAClB;AAAA,EACF;AAGA,EAAC,OAAe,0BAA0B;AAE1C,WAAS,cAAc,IAAI,YAAY,kBAAkB,CAAC;",
  "names": ["w"]
}
